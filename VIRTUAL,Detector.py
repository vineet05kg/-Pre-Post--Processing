##############################################################################################################
#                    VIRTUAL 'PHOTO-DIODE/ DETECTOR' PROGRAM TO GENERATE THE VOLTAGE PULSE                   #
#                                  ON THE PLATFORM OF PYTHON BASED PRNG                                      #
##############################################################################################################

##############################################################################################################
#          Code to generate the random numbers between two reference values in consideration with            #
#          the actual voltages 'Vmin' and 'Vmax' about the reference 'Vref' generated by the photo-          #
#          diode/ or detector...                                                                             #
##############################################################################################################

##############################################################################################################
#           With the help of this program the comparative between the "actual detector based raw             #
#           sampled data" and the "virtual detector based raw sampled data generated by python               #
#           PRNG" can be made...                                                                             #
##############################################################################################################

##############################################################################################################
#           Also the AutoCorrelation of the generated raw sample file and the corresponding bits             #
#           as well can be made... Even                                                                      #
#           (1) the entropy evalution                                                                        #
#           (2) power spectral density etc can be made...                                                    #
##############################################################################################################
# To call the different related libraries required for the program//

import csv
import numpy as np
import random
import pandas as pd
import matplotlib.pyplot as plt

##############################################################################################################
# To locate and read the actual detector file for 'Vmin', 'Vmax', 'Vref' and other statistical parameters//

csvfile_location = (r'D:/Python/VacuumData_Analysis/ForAcquired_Date[18.Dec.2019]viaAPD/1MSas/NoiseFree RawData'
                    r'(1MSas)Set1.csv')  # For the location of CSV file//
csvfile_read = pd.read_csv(csvfile_location)  # To read the CSV file//
print("First n elements of all the columns of CSV data file =", csvfile_read.head(10))  # To print the first ten
# elements of all the columns of CSV file//
print("Total number of elements in the CSV data file =", int(csvfile_read.count()))  # To print the total elements
# of CSV data file//
##############################################################################################################

csvfile_min = csvfile_read.min()  # To determine the minimum value of the CSV data file//
print ('Min. value of the CSV data file: '+ str(csvfile_min[0]))
csvfile_max = csvfile_read.max()  # To determine the maximum value of the CSV data file//
print ('Max value of the CSV data file: '+ str(csvfile_max[0]))
csvfile_mean = csvfile_read.mean()  # To determine the mean value of the CSV data file//
print ('Mean value of the CSV data file: '+ str(csvfile_mean[0]))
csvfile_median = csvfile_read.median()  # To determine the median value of the CSV data file//
print ('Median value of the CSV data file: '+ str(csvfile_median[0]))
csvfile_std = csvfile_read.std()  # To determine the standard deviation value of the CSV data file//
print ('Standard deviation of the CSV data file: '+ str(csvfile_std[0]))

##############################################################################################################
print('#####################################################################################################')
print('#                                          Virtual Detector                                         #')
print('#####################################################################################################')

A = 1 # Amplifier gain of the virtual detector//
Vmin = A*csvfile_min  # The minimum value generated by the virtual detector//
Vmax = A*csvfile_max # The maximum value generated by the virtual detector //
RecordLength = int(csvfile_read.count()) # Record length, i.e. same as the data points save in CSV file by
# oscilloscope//

Array_z = [] # To define array for the generated raw sampled data//

for x in range(RecordLength):
    virtualdetector_voltage = random.uniform(Vmin, Vmax)  # To create the random numbers between Vmin and Vmax//
    Array_z.append(round(virtualdetector_voltage,3))  # To append the generated random numbers to the array
    #  with round up of 3 place digit//

# To create the CSV file carrying virtual voltage points//
with open('VirtualDetector.csv', mode='w', newline='') as virtualdetectorfile:
    writer = csv.writer(virtualdetectorfile)
    writer.writerows((map(lambda x:[x], Array_z)))  # To write in the column//

# To create the txt file carrying virtual voltage points//
file1 = open("VirtualDetector.txt","a")
file1.write(str(Array_z))

##############################################################################################################
# Statistical parameters of the virtual generated voltage points//

virtual_voltage_mean = np.mean(Array_z)  # To determine the mean value of the virtual detector voltage//
print('Mean Voltage of the Virtual Detector :', virtual_voltage_mean)
virtual_voltage_std = np.std(Array_z)  # To determine the standard value of the virtual detector voltage//
print('Standard Deviation of the Voltage of the Virtual Detector :', virtual_voltage_std)

##############################################################################################################
# To plot the Gaussian curve of the 'virtual detector voltages' and the 'real detector CSV data file'//

# To define the function over different variables//
def gaussian(x, mean, std):
    return (1/ np.sqrt(2 * np.pi * std**2)* np.exp(-0.5 *((x - mean)/ std)**2))  # The same defined function
    # will work for each of the both real and virtual detectors//

# To define the range between which the gaussian curve will plot, i.e. from -0.5 to +.25, with total count
# same as of the data file counts//
x1 = np.linspace(-0.5, 0.5, int(csvfile_read.count()))
x2 = np.linspace(-0.5, 0.5, int(csvfile_read.count()))

w = 5.0
h = 4.0
d = 70
plt.figure(figsize=(w, h), dpi=d) # To plot the figure//
plt.subplots_adjust(left=0.155)
plt.subplots_adjust(bottom=0.15)
plt.plot(x1, gaussian(x1, virtual_voltage_mean, virtual_voltage_std), color='blue', label="Virtual")
plt.plot(x2, gaussian(x2, csvfile_mean[0], csvfile_std[0]), color='coral', label="Real")
plt.xlabel("$x$", fontsize=16)
plt.ylabel("$p(x)$", fontsize=16)
plt.legend()
plt.grid('on')
plt.show()
